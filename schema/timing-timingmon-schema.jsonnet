local moo = import "moo.jsonnet";

// A schema builder in the given path (namespace)
local ns = "dunedaq.timing.timingmon";
local s = moo.oschema.schema(ns);

// A temporary schema construction context.
local timingmon = {
    
    text_data: s.string("TextData", moo.re.ident_only, 
        doc="A string field"),

    reg_val: s.number("RegValue", "u2", 
        doc="A PLL register bit(s) value"),

    double_val: s.number("DoubleValue", "f8", 
        doc="A double"),

    timing_pll_mon_data: s.record("TimingPLLMonitorData", 
   	[
        s.field("config_id", self.text_data,
                doc="PLL config ID"),
        s.field("cal_pll", self.reg_val,
                doc="Cal pll"),
        s.field("hold", self.reg_val,
                doc="Holdover flag"),
        s.field("lol", self.reg_val,
                doc="Loss of lock flag"),
        s.field("los", self.reg_val,
                doc="Loss of signal flag"),
        s.field("los_xaxb", self.reg_val,
                doc="Loss of signal flag XAXB"),
        s.field("los_xaxb_flg", self.reg_val,
                doc="Loss of signal flag XAXB stricky"),
        s.field("oof", self.reg_val,
                doc="Out of frequency flags"),
        s.field("oof_sticky", self.reg_val,
                doc="Out of frequency flags sticky"),
        s.field("smbus_timeout", self.reg_val,
                doc="SMBUS timeout"),
        s.field("smbus_timeout_flg", self.reg_val,
                doc="SMBUS timeout sticky"),
        s.field("sysincal", self.reg_val,
               doc="In calibration flag"),
        s.field("sysincal_flg", self.reg_val,
                doc="In calibration flag sticky"),
        s.field("xaxb_err", self.reg_val,
                doc="XA-XB error flag"),
        s.field("xaxb_err_flg", self.reg_val,
                doc="XA-XB error flag sticky"),
    ], 
    doc="Timing PLL monitor structure for data read over I2C"),

    timing_sfp_mon_data: s.record("TimingSFPMonitorData", 
    [
        s.field("fault", self.reg_val,
                doc="SFP fault flag"),
        s.field("tx_disable_hw", self.reg_val,
                doc="Hardware transmit disable pin value"),
        s.field("tx_disable_sw_supp", self.reg_val,
                doc="Soft transmit disable bit control supported"),
        s.field("tx_disable_sw", self.reg_val,
                doc="Soft transmit disable bit value"),
        s.field("temperature", self.double_val,
                doc="SFP temperature"),
        s.field("supply_voltage", self.double_val,
                doc="SFP supply voltage"),
        s.field("rx_power", self.double_val,
                doc="SFP receive power"),
        s.field("tx_power", self.double_val,
                doc="SFP transmit power"),
        s.field("laser_current", self.double_val,
                doc="SFP laser current"),
        s.field("vendor_name", self.text_data,
                doc="Vendor name"),
        s.field("vendor_pn", self.text_data,
                doc="Vendor part number"),
    ], 
    doc="Timing SFP monitor structure for data read over I2C"),

    timing_fmc_mon_data: s.record("TimingFMCMonitorData", 
    [
        s.field("cdr_lol", self.reg_val,
                doc="CDR LOL flag"),
        s.field("cdr_los", self.reg_val,
                doc="CDR LOS flag"),
        s.field("mmcm_ok", self.reg_val,
                doc="MMCM OK flag"),
        s.field("mmcm_sticky", self.reg_val,
                doc="Sticky MMCM OK flag"),
        s.field("sfp_flt", self.reg_val,
                doc="SFP fault pin value"),
        s.field("sfp_los", self.reg_val,
                doc="SFP LOS pin value"),
    ], 
    doc="Timing FMC monitor data"),

    timing_fmc_mon_data_debug: s.record("TimingFMCMonitorDataDebug", 
    [
        s.field("cdr_lol", self.reg_val,
                doc="CDR LOL flag"),
        s.field("cdr_los", self.reg_val,
                doc="CDR LOS flag"),
        s.field("mmcm_ok", self.reg_val,
                doc="MMCM OK flag"),
        s.field("mmcm_sticky", self.reg_val,
                doc="Sticky MMCM OK flag"),
        s.field("sfp_flt", self.reg_val,
                doc="SFP fault pin value"),
        s.field("sfp_los", self.reg_val,
                doc="SFP LOS pin value"),
        s.field("cdr_freq", self.double_val,
                doc="CDR frequency"),
        s.field("pll_freq", self.double_val,
                doc="PLL frequency"),
        s.field("pll_mon_data", self.timing_pll_mon_data,
                doc="PLL monitoring data"),
        s.field("sfp_mon_data", self.timing_sfp_mon_data,
                doc="SFP monitoring data"),
    ], 
    doc="Timing FMC monitor data"),

    timing_tlu_mon_data: s.record("TimingTLUMonitorData", 
    [
        s.field("cdr_lol", self.reg_val,
                doc="CDR LOL flag"),
        s.field("cdr_los", self.reg_val,
                doc="CDR LOS flag"),
        s.field("mmcm_ok", self.reg_val,
                doc="MMCM OK flag"),
        s.field("mmcm_sticky", self.reg_val,
                doc="Sticky MMCM OK flag"),
        s.field("pll_ok", self.reg_val,
                doc="PLL OK flag"),
        s.field("pll_sticky", self.reg_val,
                doc="Sticky PLL OK flag"),
        s.field("sfp_flt", self.reg_val,
                doc="SFP fault pin value"),
        s.field("sfp_los", self.reg_val,
                doc="SFP LOS pin value"),
    ], 
    doc="Timing TLU monitor data"),
};

// Output a topologically sorted array.
moo.oschema.sort_select(timingmon, ns)
