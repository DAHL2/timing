local moo = import "moo.jsonnet";

// A schema builder in the given path (namespace)
local ns = "dunedaq.pdt.timingmon";
local s = moo.oschema.schema(ns);

// A temporary schema construction context.
local timingmon = {
    
    bool_data: s.boolean("BoolData", doc="A bool"),

    text_data: s.string("TextData", moo.re.ident_only, 
        doc="A string field"),

    reg_val: s.number("RegValue", "u4", 
        doc="A PLL register bit(s) value"),

    l_uint: s.number("LongUint", "u8",
        doc="64 bit uint"),

    double_val: s.number("DoubleValue", "f8", 
        doc="A double"),


    // hardware monitor structures
    timing_pll_mon_data: s.record("TimingPLLMonitorData", 
   	[
        s.field("config_id", self.text_data,
                doc="PLL config ID"),
        s.field("cal_pll", self.bool_data, 0,
                doc="Cal pll"),
        s.field("hold", self.bool_data, 0,
                doc="Holdover flag"),
        s.field("lol", self.bool_data, 0,
                doc="Loss of lock flag"),
        s.field("los", self.reg_val,
                doc="Loss of signal flag"),
        s.field("los_xaxb", self.reg_val,
                doc="Loss of signal flag XAXB"),
        s.field("los_xaxb_flg", self.reg_val,
                doc="Loss of signal flag XAXB stricky"),
        s.field("oof", self.reg_val,
                doc="Out of frequency flags"),
        s.field("oof_sticky", self.reg_val,
                doc="Out of frequency flags sticky"),
        s.field("smbus_timeout", self.bool_data, 0,
                doc="SMBUS timeout"),
        s.field("smbus_timeout_flg", self.bool_data, 0,
                doc="SMBUS timeout sticky"),
        s.field("sys_in_cal", self.bool_data, 0,
               doc="In calibration flag"),
        s.field("sys_in_cal_flg", self.bool_data, 0,
                doc="In calibration flag sticky"),
        s.field("xaxb_err", self.bool_data, 0,
                doc="XA-XB error flag"),
        s.field("xaxb_err_flg", self.bool_data, 0,
                doc="XA-XB error flag sticky"),
    ], 
    doc="Timing PLL monitor structure for data read over I2C"),


    timing_sfp_mon_data: s.record("TimingSFPMonitorData", 
    [
        s.field("vendor_name", self.text_data,
                doc="Vendor name"),
        s.field("vendor_pn", self.text_data,
                doc="Vendor part number"),
        s.field("sfp_fault", self.bool_data, 0,
               doc="SFP fault flag"),
        s.field("ddm_supported", self.bool_data, 0,
                doc="DDM supported flag"),
        s.field("tx_disable_hw", self.bool_data, 0,
                doc="Hardware transmit disable pin value"),
        s.field("tx_disable_sw_supported", self.bool_data, 0,
                doc="Soft transmit disable bit control supported"),
        s.field("tx_disable_sw", self.bool_data, 0,
                doc="Soft transmit disable bit value"),
        s.field("temperature", self.double_val,
                doc="SFP temperature"),
        s.field("supply_voltage", self.double_val,
                doc="SFP supply voltage"),
        s.field("rx_power", self.double_val,
                doc="SFP receive power"),
        s.field("tx_power", self.double_val,
                doc="SFP transmit power"),
        s.field("laser_current", self.double_val,
                doc="SFP laser current"),
    ], 
    doc="Timing SFP monitor structure for data read over I2C"),
//
    timing_fmc_mon_data: s.record("TimingFMCMonitorData", 
    [
        s.field("cdr_lol", self.bool_data,
                doc="CDR LOL flag"),
        s.field("cdr_los", self.bool_data, 0,
                doc="CDR LOS flag"),
        s.field("mmcm_ok", self.bool_data, 0,
                doc="MMCM OK flag"),
        s.field("mmcm_sticky", self.bool_data, 0,
                doc="Sticky MMCM OK flag"),
        s.field("sfp_flt", self.bool_data, 0,
                doc="SFP fault pin value"), 
        s.field("sfp_los", self.bool_data, 0,
                doc="SFP LOS pin value"),
    ], 
    doc="Timing FMC monitor data"),
//
    timing_fmc_mon_data_debug: s.record("TimingFMCMonitorDataDebug", 
    [
        s.field("pll_mon_data", self.timing_pll_mon_data,
                doc="PLL monitoring data"),
        s.field("sfp_mon_data", self.timing_sfp_mon_data,
                doc="SFP monitoring data"),
        s.field("cdr_lol", self.bool_data, 0,
                doc="CDR LOL flag"),
        s.field("cdr_los", self.bool_data, 0,
                doc="CDR LOS flag"),
        s.field("mmcm_ok", self.bool_data, 0,
                doc="MMCM OK flag"),
        s.field("mmcm_sticky", self.bool_data, 0,
                doc="Sticky MMCM OK flag"),
        s.field("sfp_flt", self.bool_data, 0,
                doc="SFP fault pin value"),
        s.field("sfp_los", self.bool_data, 0,
                doc="SFP LOS pin value"),
        s.field("cdr_freq", self.double_val,
                doc="CDR frequency"),
        s.field("pll_freq", self.double_val,
                doc="PLL frequency"),
    ],
    bases=self.timing_fmc_mon_data,
    doc="Extended timing FMC monitor data"),
//
    timing_tlu_mon_data: s.record("TimingTLUMonitorData", 
    [
        s.field("cdr_lol", self.bool_data,
                doc="CDR LOL flag"),
        s.field("cdr_los", self.bool_data, 0,
                doc="CDR LOS flag"),
        s.field("mmcm_ok", self.bool_data, 0,
                doc="MMCM OK flag"),
        s.field("mmcm_sticky", self.bool_data, 0,
                doc="Sticky MMCM OK flag"),
        s.field("pll_ok", self.bool_data, 0,
                doc="PLL OK flag"),
        s.field("pll_sticky", self.bool_data, 0,
                doc="Sticky PLL OK flag"),
        s.field("sfp_flt", self.bool_data, 0,
                doc="SFP fault pin value"),
        s.field("sfp_los", self.bool_data, 0,
                doc="SFP LOS pin value"),
    ], 
    doc="Timing TLU monitor data"),

    timing_tlu_mon_data_debug: s.record("TimingTLUMonitorDataDebug", 
    [
        s.field("cdr_lol", self.bool_data,
                doc="CDR LOL flag"),
        s.field("cdr_los", self.bool_data, 0,
                doc="CDR LOS flag"),
        s.field("mmcm_ok", self.bool_data, 0,
                doc="MMCM OK flag"),
        s.field("mmcm_sticky", self.bool_data, 0,
                doc="Sticky MMCM OK flag"),
        s.field("pll_ok", self.bool_data, 0,
                doc="PLL OK flag"),
        s.field("pll_sticky", self.bool_data, 0,
                doc="Sticky PLL OK flag"),
        s.field("sfp_flt", self.bool_data, 0,
                doc="SFP fault pin value"),
        s.field("sfp_los", self.bool_data, 0,
                doc="SFP LOS pin value"),
        s.field("pll_mon_data", self.timing_pll_mon_data,
                doc="PLL monitoring data"),
    ], 
    doc="Extended timing TLU monitor data"),

    // firmware monitoring structures
    timing_partition_mon_data: s.record("TimingPartitionMonitorData", 
    [
        s.field("enabled", self.bool_data, 0,
                doc="Partition enabled flag"),
        s.field("spill_interface_enabled", self.bool_data, 0,
                doc="Partition spill interface enabled flag"),
        s.field("trig_enabled", self.bool_data, 0,
                doc="Partition triggering enabled flag"),
        s.field("trig_mask", self.reg_val,
                doc="Partition trigger mask"),
        s.field("rate_ctrl_enabled", self.bool_data, 0,
                doc="Partition rate control enabled flag"),
        s.field("frag_mask", self.reg_val,
                doc="Partition fragment mask"),
        s.field("in_run", self.bool_data, 0,
                doc="Partition in run flag"),
        s.field("in_spill", self.bool_data, 0,
                doc="Partition in spill flag"),
        s.field("buffer_enabled", self.bool_data, 0,
                doc="Buffer enabled flag"),
        s.field("buffer_warning", self.bool_data, 0,
                doc="Buffer warning flag"),
        s.field("buffer_error", self.bool_data, 0,
                doc="Buffer error flag"),
        s.field("buffer_occupancy", self.reg_val,
                doc="Buffer occupancy"),
    ], 
    doc="Timing partition monitor data"),

    timing_partition_mon_data_vector: s.sequence("TimingPartitionMonitorDataVector", self.timing_partition_mon_data,
            doc="A vector timing partition data"),

    timing_fl_cmd_counters: s.record("TimingFLCmdCounters",
    [
        s.field("accepted", self.reg_val,
                doc="Number of commands accepted"),
        s.field("rejected", self.reg_val,
                doc="Number of commands rejected"),
    ],
    doc="Fixed length command counters structure"),

    timing_fl_cmd_counters_vector: s.sequence("TimingFLCmdCountersVector", self.timing_fl_cmd_counters,
                doc="A vector command counters object"),

    timing_pdi_master_mon_data: s.record("TimingPDIMasterMonitorData", 
    [
        s.field("timestamp", self.l_uint,
                doc="Timestamp"),
        s.field("spill_interface_enabled", self.bool_data, 0,
                doc="Partition spill interface enabled flag"),
        s.field("trig_interface_enabled", self.bool_data, 0,
                doc="Partition triggering enabled flag"),
        s.field("command_counters", self.timing_fl_cmd_counters_vector,
                doc="Vector of command counter structure"),
        s.field("partitions_data", self.timing_partition_mon_data_vector,
                doc="Vector of timing partition data"),
    ], 
    doc="PD-I timing master monitor data"),

    timing_pdi_master_design_tlu_mon_data: s.record("TimingPDIMasterDesignTLUMonitorData", 
    [
        s.field("hardware_data", self.timing_tlu_mon_data,
                doc="TLU hardware monitor data"),
        s.field("firmware_data", self.timing_pdi_master_mon_data,
                doc="PD-I timing master firmware monitor data"),
    ], 
    doc="PD-I timing master design monitor data"),

    timing_pdi_master_design_tlu_mon_data_debug: s.record("TimingPDIMasterDesignTLUMonitorDataDebug", 
    [
        s.field("firmware_data", self.timing_pdi_master_mon_data,
                doc="PD-I timing master firmware monitor data"),
        s.field("hardware_data", self.timing_tlu_mon_data_debug,
                doc="TLU hardware monitor data"),
    ], 
    doc="PD-I timing master design monitor data with extended hardware data"),

    timing_pdi_master_design_fmc_mon_data: s.record("TimingPDIMasterDesignFMCMonitorData", 
    [
        s.field("hardware_data", self.timing_fmc_mon_data,
                doc="FMC hardware monitor data"),
        s.field("firmware_data", self.timing_pdi_master_mon_data,
                doc="PD-I timing master firmware monitor data"),
    ], 
    doc="PD-I timing master design monitor data"),

    timing_pdi_master_design_fmc_mon_data_debug: s.record("TimingPDIMasterDesignFMCMonitorDataDebug", 
    [
        s.field("hardware_data", self.timing_fmc_mon_data_debug,
                doc="FMC hardware monitor data"),
        s.field("firmware_data", self.timing_pdi_master_mon_data,
                doc="PD-I timing master firmware monitor data"),
    ], 
    doc="PD-I timing master design monitor data with extended hardware data"),


};

// Output a topologically sorted array.
moo.oschema.sort_select(timingmon, ns)
